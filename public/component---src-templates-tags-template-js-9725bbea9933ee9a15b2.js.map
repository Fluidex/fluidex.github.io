{"version":3,"sources":["webpack://gatsby-starter-glass/./src/components/post-list.js","webpack://gatsby-starter-glass/./src/components/styled-link.js","webpack://gatsby-starter-glass/./src/components/tags.js","webpack://gatsby-starter-glass/./src/templates/tags-template.js","webpack://gatsby-starter-glass/./src/utils/index.js"],"names":["posts","langKey","PostList","map","frontmatter","fields","excerpt","timeToRead","title","tags","date","description","slug","PostListItem","key","formatDate","StyledPostList","StyledPostListItem","PostListTitle","Link","to","PostListExcerpt","dangerouslySetInnerHTML","__html","PostListMeta","i18nKey","count","styled","styleLink","StyledLinkWithLang","LinkWithLang","tag","Tag","str","match","x","toLowerCase","join","pageContext","data","t","useTranslation","totalCount","allMarkdownRemark","nodes","TagsTemplateWrapper","Title","dateObj","Date","toLocaleDateString","month","year","day"],"mappings":"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","file":"component---src-templates-tags-template-js-9725bbea9933ee9a15b2.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\nimport Tags from \"./tags\";\nimport { formatDate } from \"../utils\";\nimport { Trans } from \"react-i18next\";\n\nconst PostList = ({ posts, langKey }) => {\n  const PostList = posts.map(({ frontmatter, fields, excerpt, timeToRead }) => {\n    const { title, tags, date, description } = frontmatter;\n    const { slug } = fields;\n\n    return (\n      <PostListItem\n        key={slug}\n        tags={tags}\n        title={title}\n        date={formatDate(date, langKey)}\n        slug={slug}\n        timeToRead={timeToRead}\n        description={description}\n        excerpt={excerpt}\n      />\n    );\n  });\n\n  return <StyledPostList>{PostList}</StyledPostList>;\n};\n\nexport default PostList;\n\nconst PostListItem = ({\n  title,\n  date,\n  timeToRead,\n  tags,\n  excerpt,\n  description,\n  slug,\n}) => {\n  return (\n    <StyledPostListItem>\n      <Tags tags={tags} />\n\n      <PostListTitle>\n        <Link to={slug}>{title}</Link>\n      </PostListTitle>\n      <PostListExcerpt\n        dangerouslySetInnerHTML={{\n          __html: description || excerpt,\n        }}\n      />\n      <PostListMeta>\n        <span>{date}</span>\n\n        <span>\n          <Trans i18nKey=\"timeToRead\" count={timeToRead}>\n            {{ timeToRead }} mins\n          </Trans>\n        </span>\n      </PostListMeta>\n    </StyledPostListItem>\n  );\n};\n\nconst StyledPostList = styled.ul`\n  padding: 0;\n  list-style: none;\n  display: grid;\n  justify-items: center;\n  grid-gap: var(--size-600);\n  grid-template-columns: repeat(auto-fit, minmax(35ch, 1fr));\n\n  @media screen and (max-width: 500px) {\n    & {\n      display: block;\n    }\n  }\n`;\n\nconst StyledPostListItem = styled.li`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  padding: 1.5rem;\n  border: 1px solid rgba(255, 255, 255, 0.5);\n  background-color: rgba(255, 255, 255, 0.3);\n  backdrop-filter: blur(10px);\n  border-radius: 8px;\n\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.5);\n  }\n\n  @media screen and (max-width: 500px) {\n    & {\n      margin-top: var(--size-600);\n    }\n  }\n`;\n\nconst PostListTitle = styled.h2`\n  line-height: 1.2;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  text-transform: capitalize;\n  font-size: var(--size-600);\n  font-weight: 700;\n\n  & a {\n    text-decoration: none;\n    color: inherit;\n  }\n\n  & a::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n  }\n`;\n\nconst PostListExcerpt = styled.p`\n  margin-top: auto;\n  font-size: var(--size-400);\n`;\n\nconst PostListMeta = styled.div`\n  margin-top: 2rem;\n\n  font-size: var(--size-300);\n  display: flex;\n  justify-content: space-between;\n`;\n","import { Link } from \"gatsby\";\nimport LinkWithLang from \"./link-with-lang\";\nimport styled from \"styled-components\";\n\nconst styleLink = (Link) => styled(Link)`\n  padding: 0.5rem;\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n  color: inherit;\n  background-color: rgba(255, 255, 255, 0.4);\n  text-decoration: none;\n  border-radius: 0px;\n  border: 1px solid rgba(255, 255, 255, 0.8);\n  text-transform: uppercase;\n  border-radius: 4px;\n`;\n\nexport const StyledLink = styleLink(Link);\nexport const StyledLinkWithLang = styleLink(LinkWithLang);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport LinkWithLang from \"./link-with-lang\";\n\nconst toKebabCase = (str) => {\n  return str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map((x) => x.toLowerCase())\n    .join(\"-\");\n};\n\nconst Tags = ({ tags, langKey }) => {\n  return (\n    <div>\n      {tags &&\n        tags.map((tag) => {\n          return (\n            <Tag key={tag}>\n              <LinkWithLang langKey={langKey} to={`/tags/${toKebabCase(tag)}`}>\n                {tag}\n              </LinkWithLang>\n            </Tag>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default Tags;\n\nconst Tag = styled.span`\n  margin-right: 0.6rem;\n  margin-bottom: 0.6rem;\n  text-transform: uppercase;\n  font-size: var(--size-300);\n\n  & a {\n    position: relative;\n    z-index: 2;\n    background-color: rgba(255, 255, 255, 0.7);\n    text-decoration: none;\n    color: inherit;\n    padding: 0.2rem 0.6rem;\n    border: 1px solid rgba(255, 255, 255, 1);\n    border-radius: 4px;\n  }\n\n  & a:hover {\n    background-color: rgba(255, 255, 255, 0.9);\n  }\n`;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport PostList from \"../components/post-list\";\nimport { StyledLinkWithLang } from \"../components/styled-link\";\nimport LinkWithLang from \"../components/link-with-lang\";\nimport styled from \"styled-components\";\nimport { useTranslation, Trans } from \"react-i18next\";\n\nconst TagsTemplate = ({ pageContext, data }) => {\n  const { t } = useTranslation();\n  const { tag, langKey } = pageContext;\n  const { totalCount } = data.allMarkdownRemark;\n  const posts = data.allMarkdownRemark.nodes;\n  const title = `${t(\"postsTagged\")} ${tag}`;\n\n  return (\n    <Layout title={title} langKey={langKey}>\n      <TagsTemplateWrapper>\n        <Title>\n          <Trans i18nKey=\"numberOfPostsTagged\">\n            {{ totalCount }} posts tagged \"{{ tag }}\"\n          </Trans>\n        </Title>\n        <LinkWithLang\n          css={`\n            margin-top: var(--size-400);\n            display: inline-block;\n            color: inherit;\n            text-transform: uppercase;\n          `}\n          to=\"/tags\"\n          langKey={langKey}\n        >\n          {t(\"viewAllTags\")}\n        </LinkWithLang>\n        <PostList posts={posts} langKey={pageContext.langKey} />\n\n        <StyledLinkWithLang\n          css={`\n            margin-top: var(--size-400);\n            display: inline-block;\n          `}\n          to=\"/tags\"\n          langKey={langKey}\n        >\n          {t(\"viewAllTags\")}\n        </StyledLinkWithLang>\n      </TagsTemplateWrapper>\n    </Layout>\n  );\n};\n\nexport default TagsTemplate;\n\nconst TagsTemplateWrapper = styled.div`\n  padding-top: var(--size-900);\n`;\n\nconst Title = styled.h1`\n  font-size: var(--size-700);\n`;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: { tags: { in: [$tag] } }\n        fields: { contentType: { eq: \"posts\" } }\n      }\n    ) {\n      totalCount\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          date\n          description\n          tags\n          title\n        }\n        timeToRead\n        excerpt\n      }\n    }\n  }\n`;\n","export const formatDate = (date, langKey) => {\n  const dateObj = date instanceof Date ? date : new Date(date);\n\n  switch (langKey) {\n    case \"en\":\n      return dateObj.toLocaleDateString(\"en\", {\n        month: \"long\",\n        year: \"numeric\",\n        day: \"numeric\",\n      });\n    case \"zh\":\n      return dateObj.toLocaleDateString(\"zh\", {\n        month: \"numeric\",\n        year: \"numeric\",\n        day: \"numeric\",\n      });\n    default:\n      return dateObj.toLocaleDateString();\n  }\n};\n"],"sourceRoot":""}
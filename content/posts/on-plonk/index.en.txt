---
title: "On the optimization of PlonK"
date: 2021-04-17
tags: []
---

## The 3 layers of a zkSNARK system

+ Aggregation layer
+ Interactive oracle proofs (IOP) layer (where PlonK core sits in)
+ KCA / Polynomial commitment layer

Readers can get a basic idea on the relationships between each layers from https://electriccoin.co/blog/explaining-halo-2/ (although it's about Halo 2, it's still helpful for understanding the relationships), so we would like to skip repeated explanations here.


## The origin of PlonK

Out of the desire for a universal, programmable SNARK, [AZTEC](https://aztec.network/) invents and promotes the industry use of [PlonK](https://eprint.iacr.org/2019/953.pdf). PlonK is flexible to build application-specific constraints, so that it strikes a balance between theoretical properties and engineering needs. Vitalik also wrote an awesome article explaining PlonK: [Understanding PLONK](https://vitalik.ca/general/2019/09/22/plonk.html). You may also find some useful resources on https://github.com/Fluidex/awesome-plonk.

PlonK has been popular since it went published. [zkSync](https://zksync.io/), [Dusk Network](https://dusk.network/), [Mina](https://minaprotocol.com/), [Mir](https://mirprotocol.org/) are projects using PlonK or its variants.


## The features of PlonK

PlonK supports universal and updateable setup, so 

> This means two things: first, instead of there being one separate trusted setup for every program you want to prove things about, there is one single trusted setup for the whole scheme after which you can use the scheme with any program (up to some maximum size chosen when making the setup). Second, there is a way for multiple parties to participate in the trusted setup such that it is secure as long as any one of them is honest, and this multi-party procedure is fully sequential: first one person participates, then the second, then the third... The full set of participants does not even need to be known ahead of time; new participants could just add themselves to the end. This makes it easy for the trusted setup to have a large number of participants, making it quite safe in practice. -- taken from [Vitalik's website](https://vitalik.ca/general/2019/09/22/plonk.html)
Groth16 and other non-universal proof systems use rank-1 constraint system (R1CS) as the intermediate representation for their zkp circuits. PlonK uses gates instead of R1CS, and R1CS is inefficient for PlonK. Therefore, it'd better to use gates for constraints in PlonK, instead of using R1CS.


## Optimizing PlonK on IOP layer

We could also work from the three layers mentioned above to optimize PlonK.

For example, in the IOP layer, we could use custom gates to define bit arithmetic operations, including EC point addition, Poseidon hashes, Pedersen hashes, 8-bit XOR, and so on, to save the proving computations.

[PLookup](https://eprint.iacr.org/2020/315.pdf) (PlonK with lookup table) is other way for optimization. It enables lookup table in PlonK circuits, so that you can precompute a lookup table of the legitimate (input, output) combinations, and prove a witness existing in the table, instead of proving the witness itself. This means we can use lookup tables to help the computations that are originally SNARK-unfriendly. Without lookup tables, SNARKs is not friendly to bit operations: because we will have to compute bit-by-bit. But with lookup tables, we can now store the result of an 8-bit operation in a table to lookup and access, avoiding computing bit-by-bit again. (You can think it as compute 8 bits at a time.)

PLookup can also be extended to vector lookups and multiple tables, bringing huge benefits to circuit programming models involving dynamic memory (e.g., vectors & dynamic array).

AZTEC's "Turbo-PlonK" is "PlonK + custom gate", and its "Ultra-PlonK" is "PlonK (+ custom gate) + PLookup". According to their benchmarks([[1]](https://medium.com/aztec-protocol/plonk-benchmarks-2-5x-faster-than-groth16-on-mimc-9e1009f96dfe), [[2]](https://medium.com/aztec-protocol/plonk-benchmarks-ii-5x-faster-than-groth16-on-pedersen-hashes-ea5285353db0), [[3]](https://medium.com/aztec-protocol/aztecs-zk-zk-rollup-looking-behind-the-cryptocurtain-2b8af1fca619)), they achieve considerable improvements by integrating custom gates and PLookup.


## Optimization on aggregation layer

Another great technique is (zkp) recursion: it has such a nice feature that you can recursively aggregate several proofs into a single proof while still keeping it succinct, and you can verify them all in one go.

[Halo](https://eprint.iacr.org/2019/1021.pdf) is probably the first notable efficient recursive zkp scheme not requiring a trusted setup, which inspires many future works. PlonK can use custom gate for prime field arithmetic, which means it will be quite convenient and efficient to implement Halo-style recursion in PlonK.

This is an optimization technique on aggregation layer.

## Optimization on polynomial commitment layer

[SHPLONK](https://eprint.iacr.org/2020/081.pdf) is an optimization on polynomial commitment layer, which can work with PlonK to acheive smaller proof size and shorter proving time. Other protocols aiming at optimizing polynomial commitment also exist.
